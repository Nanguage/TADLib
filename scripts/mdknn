#!/usr/bin/env python

## Required modules
from __future__ import division
import os, argparse, sys, logging, logging.handlers

import cooler
import numpy as np
import pandas as pd
from tqdm import tqdm
from statsmodels.stats.multitest import multipletests

import tadlib
from tadlib.mdknn import analyze


currentVersion = tadlib.__version__

def getargs():
    ## Construct an ArgumentParser object for command-line arguments
    parser = argparse.ArgumentParser(usage = '%(prog)s [options]\n\n'
                                     'MDKNN -- Mean Distance of k Nearest Neighbors',
                                    description = '''The calculation is implemented by identifying
                                    long-range significant interactions for each TAD and looking for
                                    the aggregation patterns thereof. For more details, please refer
                                    to online TADLib documentation.''',
                                    formatter_class = argparse.ArgumentDefaultsHelpFormatter)

    # Version
    parser.add_argument('-v', '--version', action = 'version',
                        version = ' '.join(['%(prog)s', currentVersion]),
                        help = 'Print version number and exit')

    # Output
    parser.add_argument('-O', '--output',
                        help = 'Output file name.')

    ## Argument Groups
    group_1 = parser.add_argument_group(title = 'Relate to the input')
    group_1.add_argument('-p', '--path', default = '.',
                         help = 'Path to the cool URI')
    group_1.add_argument('-p2', '--path-2',
                         help = 'Path to the cool URI')
    group_1.add_argument('-t', '--tad-file', help = 'Path to the TAD file.')

    ## About the algorithm
    group_3 = parser.add_argument_group(title='Feature calculation')
    group_3.add_argument('-k', type = int, default = 4, help = 'Number of nearest neighbors.')
    group_3.add_argument('--pw', type = int, default = 2, help = '''Width of the interaction
                         region surrounding the peak. According to experience, we set it
                         to 1 at 20 kb, 2 at 10 kb, and 4 at 5 kb.''')
    group_3.add_argument('--ww', type = int, default = 5, help = '''Width of the donut region
                         Set it to 3 at 20 kb, 5 at 10 kb, and 7 at 5 kb.''')
    group_3.add_argument('--top', type = float, default = 0.7, help = 'Parameter for noisy '
                         'interaction filtering. By default, 30 percent noisy interactions'
                         ' will be eliminated.')
    group_3.add_argument('--ratio', type = float, default = 0.05, help = 'Specifies the sample'
                         ' ratio of significant interactions for TAD.')
    group_3.add_argument('--gap', type = float, default = 0.2, help = 'Maximum gap ratio.')
    
    ## Parse the command-line arguments
    commands = sys.argv[1:]
    if not commands:
        commands.append('-h')
    args = parser.parse_args(commands)
    
    return args, commands


def get_gap_ratio(matrix):
    matrix[np.isnan(matrix)] = 0
    newM, _ = analyze.manipulation(matrix)
    if len(matrix) > 0:
        # Ratio of Gaps (Vacant Rows or Columns)
        gaps = 1 - len(newM) / len(matrix)
    else:
        gaps = 1.0
    return newM, gaps


## Pipeline
def pipe(args, logger):
    """The Main pipeline for MDKNN.
    """
    ## Logging for argument setting
    arglist = ['# ARGUMENT LIST:',
               '# output file name = {0}'.format(args.output),
               '# Hi-C path = {0}'.format(args.path),
               '# TAD source file = {0}'.format(args.tad_file),
               '# Peak window width = {0}'.format(args.pw),
               '# Donut width = {0}'.format(args.ww),
               '# Noise filtering ratio = {0}'.format((1 - args.top)),
               '# Significant interaction ratio = {0}'.format(args.ratio),
               '# Maximum gap ratio = {0}'.format(args.gap)]
    
    argtxt = '\n'.join(arglist)
    logger.info('\n' + argtxt)
             
    logger.info('Read Hi-C data ...')
    cool = cooler.Cooler(args.path)

    # Load External TAD File, Columns 0,1,2
    logger.info('Read external TAD data ...')

    TADs = analyze.load_TAD(args.tad_file)
    
    # Header
    header = ['ChromID', 'Start', 'End', 'AP', 'Gap-Ratio']
    out_rows = []

    logger.info('Calculate feature for each TAD ...')
    for i, row in tqdm(TADs.iterrows(), total=TADs.shape[0]):
        chr_, start, end = row.chr, row.start, row.end

        # Interaction Matrix
        balance = 'weight' in cool.bins().keys()
        matrix = cool.matrix(balance=balance,  sparse=False).fetch((chr_, start, min(end, cool.chromsizes[chr_])))

        newM, gaps = get_gap_ratio(matrix)
        if (gaps < args.gap) and (newM.shape[0] > (args.ww * 2 + 1)):
            core = analyze.Core(matrix, k=args.k)
            # Extract Long-Range Interactions
            core.longrange(pw=args.pw, ww=args.ww, top=args.top, ratio=args.ratio)
            # Feature
            core.MDKNN()

            # Line by Line
            o_row = [chr_, start, end, core.AP, gaps]
        else:
            # Bad Domain!
            o_row = [chr_, start, end, np.nan, gaps]
        out_rows.append(o_row)
    logger.info('Done!')
    out_df = pd.DataFrame(out_rows)
    out_df.columns = header

    logger.info('Write results to %s ...', args.output)
    out_df.to_csv(args.output, na_rep='NA', sep='\t', index=False)
    logger.info('Done!\n')


def pipe_compare(args, logger):
    ## Logging for argument setting
    arglist = ['# ARGUMENT LIST:',
               '# output file name = {0}'.format(args.output),
               '# Comparision mode: True',
               '# Hi-C path 1 = {0}'.format(args.path),
               '# Hi-C path 2 = {0}'.format(args.path_2),
               '# TAD source file = {0}'.format(args.tad_file),
               '# Peak window width = {0}'.format(args.pw),
               '# Donut width = {0}'.format(args.ww),
               '# Noise filtering ratio = {0}'.format((1 - args.top)),
               '# Significant interaction ratio = {0}'.format(args.ratio),
               '# Maximum gap ratio = {0}'.format(args.gap)]

    argtxt = '\n'.join(arglist)
    logger.info('\n' + argtxt)

    logger.info('Read Hi-C data ...')
    cool_1 = cooler.Cooler(args.path)
    cool_2 = cooler.Cooler(args.path_2)

    # Load External TAD File, Columns 0,1,2
    logger.info('Read external TAD data ...')
    TADs = analyze.load_TAD(args.tad_file)

    out_rows = []
    # Header
    header = ['ChromID', 'Start', 'End', 'AP1', 'AP2', 'D', 'p-value', 'padj', 'Gap-Ratio-1', 'Gap-Ratio-2']

    logger.info('Calculate feature for each TAD ...')
    for i, row in tqdm(TADs.iterrows(), total=TADs.shape[0]):
        chr_, start, end = row.chr, row.start, row.end

        # Interaction Matrix
        balance = 'weight' in cool_1.bins().keys()
        matrix_1 = cool_1.matrix(balance=balance,  sparse=False).fetch((chr_, start, min(end, cool_1.chromsizes[chr_])))
        balance = 'weight' in cool_2.bins().keys()
        matrix_2 = cool_2.matrix(balance=balance,  sparse=False).fetch((chr_, start, min(end, cool_2.chromsizes[chr_])))

        newM_1, gaps_1 = get_gap_ratio(matrix_1)
        newM_2, gaps_2 = get_gap_ratio(matrix_2)
            
        if (gaps_1 < args.gap) and (newM_1.shape[0] > (args.ww * 2 + 1)) and \
           (gaps_2 < args.gap) and (newM_2.shape[0] > (args.ww * 2 + 1)):

            core_1 = analyze.Core(matrix_1, k=args.k)
            core_1.longrange(pw = args.pw, ww = args.ww, top = args.top, ratio = args.ratio)
            core_1.MDKNN()

            core_2 = analyze.Core(matrix_2, k=args.k)
            core_2.longrange(pw = args.pw, ww = args.ww, top = args.top, ratio = args.ratio)
            core_2.MDKNN()
            comp = analyze.Compare(core_1, core_2)
            if (core_1.mean_dist_all is np.nan) or (core_2.mean_dist_all is np.nan):
                # Bad Domain!
                o_row = [chr_, start, end, np.nan, np.nan, np.nan, np.nan, np.nan, gaps_1, gaps_2]
            else:
                comp.compare()
                pvalue, D = comp.pvalue, comp.D
                o_row = [chr_, start, end, core_1.AP, core_2.AP, D, pvalue, np.nan, gaps_1, gaps_2]
        else:
            # Bad Domain!
            o_row = [chr_, start, end, np.nan, np.nan, np.nan, np.nan, np.nan, gaps_1, gaps_2]
            
        out_rows.append(o_row)
    
    out_df = pd.DataFrame(out_rows)
    out_df.columns = header

    logger.info("Perform multiple test correction with fdr_bh method.")
    pvals = out_df['p-value']
    pvals_ = pvals[~pvals.isna()]
    _, padjs, _, _ = multipletests(pvals_, method='fdr_bh')
    out_df.loc[pvals_.index, 'padj'] = padjs

    logger.info('Done!')
    logger.info('Write results to %s ...', args.output)
    out_df.to_csv(args.output, sep='\t', na_rep='NA', index=False)

    logger.info('Done!\n')


def main():
    # Parse Arguments
    args, commands = getargs()
    # Improve the performance if you don't want to run it
    if commands[0] not in ['-h', '-v', '--help', '--version']:
        ## Root Logger Configuration
        logger = logging.getLogger()
        logger.setLevel(10)
        console = logging.StreamHandler()
        filehandler = logging.handlers.RotatingFileHandler('mdknn.log',
                                                           maxBytes = 30000,
                                                           backupCount = 5)
        # Set level for Handlers
        console.setLevel('INFO')
        filehandler.setLevel('DEBUG')
        # Customizing Formatter
        formatter = logging.Formatter(fmt = '%(name)-14s %(levelname)-7s @ %(asctime)s: %(message)s',
                                      datefmt = '%m/%d/%y %H:%M:%S')
        ## Unified Formatter
        console.setFormatter(formatter)
        filehandler.setFormatter(formatter)
        # Add Handlers
        logger.addHandler(console)
        logger.addHandler(filehandler)

        # compare 2 sample or not
        comparision = False
        if args.path_2:
            comparision = True

        if comparision:
            pipe_compare(args, logger)
        else:
            pipe(args, logger)


if __name__ == '__main__':
    main()